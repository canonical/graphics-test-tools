name: graphics-test-tools
version: "22.04"
base: core22
summary: Tools helpful in debugging graphics stacks
description: |
  - drm-info (MIT):
    List the capabilities and current settings of this device's DRM
    (Direct Rendering Manager) hardware.
  - glmark2-es2 (GPLv3):
    OpenGL ES 2.0 X11 benchmark.
  - glmark2-es2-wayland (GPLv3):
    OpenGL ES 2.0 Wayland benchmark.
  - eglinfo (MIT):
    Dump information about the available EGL setup.
  - glxinfo (MIT):
    Dump information about the available GLX setup.
  - kmscube (MIT):
    Example KMS/GBM/EGL application
  - vainfo (MIT):
    Dump information about the available VAAPI (hardware video acceleration) setup.
  - vdpauinfo (MIT):
    Dump information about the available VDPAU (hardware video acceleration) setup.
  - vulkaninfo (Apache-2.0):
    Dump information about the available Vulkan setup.
  - vkcube (Apache-2.0):
    Test the Vulkan setup.
  - bandwidthTest (MIT):
    A sample NVIDIA CUDA application can be used to confirm CUDA operational status.
    (needs nvidia-core22)
  - deviceQuery (MIT):
    Query NVIDIA CUDA hardware configuration. (needs nvidia-core22)

  This snap uses the graphics-core22 interface to gain support graphics hardware.
  It can be used to verify custom graphics-core22 provider implementations.
  The CUDA specific apps require NVIDIA capable provider, such as nvidia-core22.

  See https://mir-server.io/docs/the-graphics-core22-snap-interface) for more
  information.
website: https://github.com/MirServer/graphics-test-tools
contact: https://github.com/MirServer/graphics-test-tools/issues
license: Apache-2.0 AND GPL-3.0 AND MIT

grade: stable
confinement: strict

layout:
  /usr/share/drirc.d:
    bind: $SNAP/graphics/drirc.d

plugs:
  graphics-core22:
    interface: content
    target: $SNAP/graphics
    default-provider: mesa-core22

apps:
  cuda-bandwidthTest:
    plugs:
      - opengl
    command-chain:
      - bin/graphics-core22-wrapper
    command: usr/bin/bandwidthTest

  cuda-deviceQuery:
    plugs:
      - opengl
    command-chain:
      - bin/graphics-core22-wrapper
    command: usr/bin/deviceQuery

  drm-info:
    plugs:
      - opengl
    command: usr/bin/drm_info

  eglinfo:
    plugs:
      - opengl
      - wayland
      - x11
    command-chain:
      - bin/graphics-core22-wrapper
      - bin/wayland-launch
    command: usr/bin/eglinfo

  glmark2-es2:
    plugs:
      - opengl
      - x11
    command-chain:
      - bin/graphics-core22-wrapper
    command: usr/bin/glmark2-es2 --data-path $SNAP/usr/share/glmark2

  glmark2-es2-wayland:
    plugs:
      - opengl
      - wayland
    command-chain:
      - bin/graphics-core22-wrapper
      - bin/wayland-launch
    command: usr/bin/glmark2-es2-wayland --data-path $SNAP/usr/share/glmark2

  glxinfo:
    plugs:
      - opengl
      - x11
    command-chain:
      - bin/graphics-core22-wrapper
    command: usr/bin/glxinfo

  kmscube:
    plugs:
      - opengl
    command-chain:
      - bin/graphics-core22-wrapper
    command: usr/bin/kmscube

  vainfo:
    plugs:
      - opengl
    command-chain:
      - bin/graphics-core22-wrapper
    command: usr/bin/vainfo

  vdpauinfo:
    plugs:
      - opengl
      - x11
    command-chain:
      - bin/graphics-core22-wrapper
    command: usr/bin/vdpauinfo

  vulkaninfo:
    plugs:
      - opengl
      - x11
    command-chain:
      - bin/graphics-core22-wrapper
    command: usr/bin/vulkaninfo

  vkcube:
    plugs:
      - opengl
      - x11
    command-chain:
      - bin/graphics-core22-wrapper
    command: usr/bin/vkcube

parts:
  scripts:
    plugin: dump
    source: scripts
    stage-packages:
      - inotify-tools

  cuda-samples:
    source: https://github.com/NVIDIA/cuda-samples
    source-tag: v11.5
    source-type: git
    source-depth: 1
    plugin: nil
    build-packages:
      - build-essential
      - on amd64:
        - libnvidia-compute-535-server
        - nvidia-cuda-toolkit
      - on arm64:
        - libnvidia-compute-535-server
        - nvidia-cuda-toolkit
    override-build: |
      mkdir -p $SNAPCRAFT_PART_INSTALL/usr/bin/
      case $CRAFT_TARGET_ARCH in
      amd64|arm64)
        make -C Samples/bandwidthTest CUDA_PATH=/usr/lib/nvidia-cuda-toolkit
        make -C Samples/deviceQuery CUDA_PATH=/usr/lib/nvidia-cuda-toolkit
        mkdir -p $SNAPCRAFT_PART_INSTALL/usr/bin/
        cp bin/*/linux/release/* $SNAPCRAFT_PART_INSTALL/usr/bin/
      ;;
      *)
        ln -vs ../../bin/no-cuda $SNAPCRAFT_PART_INSTALL/usr/bin/bandwidthTest
        ln -vs ../../bin/no-cuda $SNAPCRAFT_PART_INSTALL/usr/bin/deviceQuery
      ;;
      esac
    stage:
      - usr/bin/bandwidthTest
      - usr/bin/deviceQuery

  drm-info:
    plugin: nil
    stage-packages:
      - drm-info

  eglinfo:
    plugin: nil
    source: .
    stage-packages:
      - mesa-utils-extra

  glmark2:
    plugin: nil
    source: .
    stage-packages:
      - glmark2-es2
      - glmark2-es2-wayland

  kmscube:
    plugin: nil
    stage-packages:
      - kmscube

  vainfo:
    plugin: nil
    stage-packages:
      - vainfo

  vdpauinfo:
    plugin: nil
    stage-packages:
      - vdpauinfo

  vulkan-tools:
    plugin: nil
    stage-packages:
      - vulkan-tools

  graphics-core22:
    after:
      - cuda-samples
      - drm-info
      - eglinfo
      - glmark2
      - kmscube
      - vainfo
      - vdpauinfo
      - vulkan-tools
    source: https://github.com/MirServer/graphics-core22.git
    plugin: dump
    override-prime: |
      craftctl default
      ${CRAFT_PART_SRC}/bin/graphics-core22-cleanup mesa-core22
      rm -rf ${CRAFT_PRIME}/usr/share/{doc,man}
    prime:
      - bin/graphics-core22-wrapper
